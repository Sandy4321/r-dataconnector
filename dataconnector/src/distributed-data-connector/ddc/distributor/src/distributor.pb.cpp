/*
(c) Copyright 2015 Hewlett Packard Enterprise Development LP

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distributor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distributor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddc {
namespace distributor {

namespace {

const ::google::protobuf::Descriptor* Registration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Registration_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProgressUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgressUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AnyRequest_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_distributor_2eproto() {
  protobuf_AddDesc_distributor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "distributor.proto");
  GOOGLE_CHECK(file != NULL);
  Registration_descriptor_ = file->message_type(0);
  static const int Registration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, ipaddress_),
  };
  Registration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Registration_descriptor_,
      Registration::default_instance_,
      Registration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Registration));
  FetchSplitRequest_descriptor_ = file->message_type(1);
  static const int FetchSplitRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, objecttype_),
  };
  FetchSplitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchSplitRequest_descriptor_,
      FetchSplitRequest::default_instance_,
      FetchSplitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchSplitRequest));
  FetchSplitResponse_descriptor_ = file->message_type(2);
  static const int FetchSplitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitResponse, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitResponse, status_),
  };
  FetchSplitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchSplitResponse_descriptor_,
      FetchSplitResponse::default_instance_,
      FetchSplitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchSplitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchSplitResponse));
  HeartBeatRequest_descriptor_ = file->message_type(3);
  static const int HeartBeatRequest_offsets_[1] = {
  };
  HeartBeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatRequest_descriptor_,
      HeartBeatRequest::default_instance_,
      HeartBeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatRequest));
  HeartBeatResponse_descriptor_ = file->message_type(4);
  static const int HeartBeatResponse_offsets_[1] = {
  };
  HeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatResponse_descriptor_,
      HeartBeatResponse::default_instance_,
      HeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatResponse));
  ShutdownRequest_descriptor_ = file->message_type(5);
  static const int ShutdownRequest_offsets_[1] = {
  };
  ShutdownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownRequest_descriptor_,
      ShutdownRequest::default_instance_,
      ShutdownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownRequest));
  ProgressUpdate_descriptor_ = file->message_type(6);
  static const int ProgressUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressUpdate, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressUpdate, bytescompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressUpdate, bytestotal_),
  };
  ProgressUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgressUpdate_descriptor_,
      ProgressUpdate::default_instance_,
      ProgressUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgressUpdate));
  AnyRequest_descriptor_ = file->message_type(7);
  static const int AnyRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, registration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, fetchsplitrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, fetchsplitresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, heartbeatrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, heartbeatresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, shutdownrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, progressupdate_),
  };
  AnyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnyRequest_descriptor_,
      AnyRequest::default_instance_,
      AnyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnyRequest));
  AnyRequest_Type_descriptor_ = AnyRequest_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_distributor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Registration_descriptor_, &Registration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchSplitRequest_descriptor_, &FetchSplitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchSplitResponse_descriptor_, &FetchSplitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatRequest_descriptor_, &HeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatResponse_descriptor_, &HeartBeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownRequest_descriptor_, &ShutdownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgressUpdate_descriptor_, &ProgressUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnyRequest_descriptor_, &AnyRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_distributor_2eproto() {
  delete Registration::default_instance_;
  delete Registration_reflection_;
  delete FetchSplitRequest::default_instance_;
  delete FetchSplitRequest_reflection_;
  delete FetchSplitResponse::default_instance_;
  delete FetchSplitResponse_reflection_;
  delete HeartBeatRequest::default_instance_;
  delete HeartBeatRequest_reflection_;
  delete HeartBeatResponse::default_instance_;
  delete HeartBeatResponse_reflection_;
  delete ShutdownRequest::default_instance_;
  delete ShutdownRequest_reflection_;
  delete ProgressUpdate::default_instance_;
  delete ProgressUpdate_reflection_;
  delete AnyRequest::default_instance_;
  delete AnyRequest_reflection_;
}

void protobuf_AddDesc_distributor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021distributor.proto\022\017ddc.distributor\"-\n\014"
    "Registration\022\n\n\002id\030\001 \002(\t\022\021\n\tipAddress\030\002 "
    "\003(\t\"r\n\021FetchSplitRequest\022\013\n\003tag\030\001 \002(\t\022\020\n"
    "\010filename\030\002 \002(\t\022\r\n\005start\030\003 \002(\004\022\013\n\003end\030\004 "
    "\002(\004\022\016\n\006schema\030\005 \002(\t\022\022\n\nobjectType\030\006 \002(\t\""
    "1\n\022FetchSplitResponse\022\013\n\003tag\030\001 \002(\t\022\016\n\006st"
    "atus\030\002 \002(\005\"\022\n\020HeartBeatRequest\"\023\n\021HeartB"
    "eatResponse\"\021\n\017ShutdownRequest\"I\n\016Progre"
    "ssUpdate\022\013\n\003tag\030\001 \002(\t\022\026\n\016bytesCompleted\030"
    "\002 \002(\004\022\022\n\nbytesTotal\030\003 \002(\004\"\211\005\n\nAnyRequest"
    "\022.\n\004type\030\001 \002(\0162 .ddc.distributor.AnyRequ"
    "est.Type\0223\n\014registration\030\002 \001(\0132\035.ddc.dis"
    "tributor.Registration\022=\n\021fetchSplitReque"
    "st\030\003 \001(\0132\".ddc.distributor.FetchSplitReq"
    "uest\022\?\n\022fetchSplitResponse\030\004 \001(\0132#.ddc.d"
    "istributor.FetchSplitResponse\022;\n\020heartBe"
    "atRequest\030\005 \001(\0132!.ddc.distributor.HeartB"
    "eatRequest\022=\n\021heartBeatResponse\030\006 \001(\0132\"."
    "ddc.distributor.HeartBeatResponse\0229\n\017shu"
    "tdownRequest\030\007 \001(\0132 .ddc.distributor.Shu"
    "tdownRequest\0227\n\016progressUpdate\030\010 \001(\0132\037.d"
    "dc.distributor.ProgressUpdate\"\245\001\n\004Type\022\020"
    "\n\014REGISTRATION\020\001\022\027\n\023FETCH_SPLIT_REQUEST\020"
    "\002\022\030\n\024FETCH_SPLIT_RESPONSE\020\003\022\025\n\021HEARTBEAT"
    "_REQUEST\020\004\022\026\n\022HEARTBEAT_RESPONSE\020\005\022\024\n\020SH"
    "UTDOWN_REQUEST\020\006\022\023\n\017PROGRESS_UPDATE\020\007", 1037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "distributor.proto", &protobuf_RegisterTypes);
  Registration::default_instance_ = new Registration();
  FetchSplitRequest::default_instance_ = new FetchSplitRequest();
  FetchSplitResponse::default_instance_ = new FetchSplitResponse();
  HeartBeatRequest::default_instance_ = new HeartBeatRequest();
  HeartBeatResponse::default_instance_ = new HeartBeatResponse();
  ShutdownRequest::default_instance_ = new ShutdownRequest();
  ProgressUpdate::default_instance_ = new ProgressUpdate();
  AnyRequest::default_instance_ = new AnyRequest();
  Registration::default_instance_->InitAsDefaultInstance();
  FetchSplitRequest::default_instance_->InitAsDefaultInstance();
  FetchSplitResponse::default_instance_->InitAsDefaultInstance();
  HeartBeatRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatResponse::default_instance_->InitAsDefaultInstance();
  ShutdownRequest::default_instance_->InitAsDefaultInstance();
  ProgressUpdate::default_instance_->InitAsDefaultInstance();
  AnyRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_distributor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_distributor_2eproto {
  StaticDescriptorInitializer_distributor_2eproto() {
    protobuf_AddDesc_distributor_2eproto();
  }
} static_descriptor_initializer_distributor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Registration::kIdFieldNumber;
const int Registration::kIpAddressFieldNumber;
#endif  // !_MSC_VER

Registration::Registration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.Registration)
}

void Registration::InitAsDefaultInstance() {
}

Registration::Registration(const Registration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.Registration)
}

void Registration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Registration::~Registration() {
  // @@protoc_insertion_point(destructor:ddc.distributor.Registration)
  SharedDtor();
}

void Registration::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Registration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Registration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Registration_descriptor_;
}

const Registration& Registration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

Registration* Registration::default_instance_ = NULL;

Registration* Registration::New() const {
  return new Registration;
}

void Registration::Clear() {
  if (has_id()) {
    if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      id_->clear();
    }
  }
  ipaddress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Registration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.Registration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipAddress;
        break;
      }

      // repeated string ipAddress = 2;
      case 2: {
        if (tag == 18) {
         parse_ipAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress(this->ipaddress_size() - 1).data(),
            this->ipaddress(this->ipaddress_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipAddress;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.Registration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.Registration)
  return false;
#undef DO_
}

void Registration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.Registration)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string ipAddress = 2;
  for (int i = 0; i < this->ipaddress_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->ipaddress(i).data(), this->ipaddress(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "ipaddress");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ipaddress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.Registration)
}

::google::protobuf::uint8* Registration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.Registration)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string ipAddress = 2;
  for (int i = 0; i < this->ipaddress_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress(i).data(), this->ipaddress(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ipaddress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.Registration)
  return target;
}

int Registration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated string ipAddress = 2;
  total_size += 1 * this->ipaddress_size();
  for (int i = 0; i < this->ipaddress_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipaddress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Registration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Registration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Registration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Registration::MergeFrom(const Registration& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipaddress_.MergeFrom(from.ipaddress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Registration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Registration::CopyFrom(const Registration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Registration::Swap(Registration* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    ipaddress_.Swap(&other->ipaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Registration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Registration_descriptor_;
  metadata.reflection = Registration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchSplitRequest::kTagFieldNumber;
const int FetchSplitRequest::kFilenameFieldNumber;
const int FetchSplitRequest::kStartFieldNumber;
const int FetchSplitRequest::kEndFieldNumber;
const int FetchSplitRequest::kSchemaFieldNumber;
const int FetchSplitRequest::kObjectTypeFieldNumber;
#endif  // !_MSC_VER

FetchSplitRequest::FetchSplitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.FetchSplitRequest)
}

void FetchSplitRequest::InitAsDefaultInstance() {
}

FetchSplitRequest::FetchSplitRequest(const FetchSplitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.FetchSplitRequest)
}

void FetchSplitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objecttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchSplitRequest::~FetchSplitRequest() {
  // @@protoc_insertion_point(destructor:ddc.distributor.FetchSplitRequest)
  SharedDtor();
}

void FetchSplitRequest::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_;
  }
  if (objecttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objecttype_;
  }
  if (this != default_instance_) {
  }
}

void FetchSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchSplitRequest_descriptor_;
}

const FetchSplitRequest& FetchSplitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

FetchSplitRequest* FetchSplitRequest::default_instance_ = NULL;

FetchSplitRequest* FetchSplitRequest::New() const {
  return new FetchSplitRequest;
}

void FetchSplitRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FetchSplitRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(start_, end_);
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schema_->clear();
      }
    }
    if (has_objecttype()) {
      if (objecttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        objecttype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.FetchSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // required uint64 start = 3;
      case 3: {
        if (tag == 24) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }

      // required uint64 end = 4;
      case 4: {
        if (tag == 32) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_schema;
        break;
      }

      // required string schema = 5;
      case 5: {
        if (tag == 42) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema().data(), this->schema().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "schema");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_objectType;
        break;
      }

      // required string objectType = 6;
      case 6: {
        if (tag == 50) {
         parse_objectType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objecttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objecttype().data(), this->objecttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "objecttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.FetchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.FetchSplitRequest)
  return false;
#undef DO_
}

void FetchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.FetchSplitRequest)
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required uint64 start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start(), output);
  }

  // required uint64 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end(), output);
  }

  // required string schema = 5;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->schema(), output);
  }

  // required string objectType = 6;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objecttype().data(), this->objecttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objecttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->objecttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.FetchSplitRequest)
}

::google::protobuf::uint8* FetchSplitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.FetchSplitRequest)
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required uint64 start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start(), target);
  }

  // required uint64 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end(), target);
  }

  // required string schema = 5;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->schema(), target);
  }

  // required string objectType = 6;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objecttype().data(), this->objecttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objecttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->objecttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.FetchSplitRequest)
  return target;
}

int FetchSplitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required uint64 start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // required uint64 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

    // required string schema = 5;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema());
    }

    // required string objectType = 6;
    if (has_objecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objecttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchSplitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchSplitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchSplitRequest::MergeFrom(const FetchSplitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_schema()) {
      set_schema(from.schema());
    }
    if (from.has_objecttype()) {
      set_objecttype(from.objecttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchSplitRequest::CopyFrom(const FetchSplitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSplitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FetchSplitRequest::Swap(FetchSplitRequest* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(filename_, other->filename_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(schema_, other->schema_);
    std::swap(objecttype_, other->objecttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchSplitRequest_descriptor_;
  metadata.reflection = FetchSplitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchSplitResponse::kTagFieldNumber;
const int FetchSplitResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

FetchSplitResponse::FetchSplitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.FetchSplitResponse)
}

void FetchSplitResponse::InitAsDefaultInstance() {
}

FetchSplitResponse::FetchSplitResponse(const FetchSplitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.FetchSplitResponse)
}

void FetchSplitResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchSplitResponse::~FetchSplitResponse() {
  // @@protoc_insertion_point(destructor:ddc.distributor.FetchSplitResponse)
  SharedDtor();
}

void FetchSplitResponse::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void FetchSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchSplitResponse_descriptor_;
}

const FetchSplitResponse& FetchSplitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

FetchSplitResponse* FetchSplitResponse::default_instance_ = NULL;

FetchSplitResponse* FetchSplitResponse::New() const {
  return new FetchSplitResponse;
}

void FetchSplitResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.FetchSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.FetchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.FetchSplitResponse)
  return false;
#undef DO_
}

void FetchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.FetchSplitResponse)
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.FetchSplitResponse)
}

::google::protobuf::uint8* FetchSplitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.FetchSplitResponse)
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.FetchSplitResponse)
  return target;
}

int FetchSplitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchSplitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchSplitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchSplitResponse::MergeFrom(const FetchSplitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchSplitResponse::CopyFrom(const FetchSplitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSplitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FetchSplitResponse::Swap(FetchSplitResponse* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchSplitResponse_descriptor_;
  metadata.reflection = FetchSplitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.HeartBeatRequest)
}

void HeartBeatRequest::InitAsDefaultInstance() {
}

HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:ddc.distributor.HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatRequest_descriptor_;
}

const HeartBeatRequest& HeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

HeartBeatRequest* HeartBeatRequest::default_instance_ = NULL;

HeartBeatRequest* HeartBeatRequest::New() const {
  return new HeartBeatRequest;
}

void HeartBeatRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.HeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.HeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.HeartBeatRequest)
  return false;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.HeartBeatRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.HeartBeatRequest)
}

::google::protobuf::uint8* HeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.HeartBeatRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.HeartBeatRequest)
  return target;
}

int HeartBeatRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {

  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatRequest_descriptor_;
  metadata.reflection = HeartBeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.HeartBeatResponse)
}

void HeartBeatResponse::InitAsDefaultInstance() {
}

HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:ddc.distributor.HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatResponse_descriptor_;
}

const HeartBeatResponse& HeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

HeartBeatResponse* HeartBeatResponse::default_instance_ = NULL;

HeartBeatResponse* HeartBeatResponse::New() const {
  return new HeartBeatResponse;
}

void HeartBeatResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.HeartBeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.HeartBeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.HeartBeatResponse)
  return false;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.HeartBeatResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.HeartBeatResponse)
}

::google::protobuf::uint8* HeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.HeartBeatResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.HeartBeatResponse)
  return target;
}

int HeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {

  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatResponse_descriptor_;
  metadata.reflection = HeartBeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.ShutdownRequest)
}

void ShutdownRequest::InitAsDefaultInstance() {
}

ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:ddc.distributor.ShutdownRequest)
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownRequest_descriptor_;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

ShutdownRequest* ShutdownRequest::default_instance_ = NULL;

ShutdownRequest* ShutdownRequest::New() const {
  return new ShutdownRequest;
}

void ShutdownRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.ShutdownRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.ShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.ShutdownRequest)
  return false;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.ShutdownRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.ShutdownRequest)
}

::google::protobuf::uint8* ShutdownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.ShutdownRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.ShutdownRequest)
  return target;
}

int ShutdownRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {

  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownRequest_descriptor_;
  metadata.reflection = ShutdownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProgressUpdate::kTagFieldNumber;
const int ProgressUpdate::kBytesCompletedFieldNumber;
const int ProgressUpdate::kBytesTotalFieldNumber;
#endif  // !_MSC_VER

ProgressUpdate::ProgressUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.ProgressUpdate)
}

void ProgressUpdate::InitAsDefaultInstance() {
}

ProgressUpdate::ProgressUpdate(const ProgressUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.ProgressUpdate)
}

void ProgressUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytescompleted_ = GOOGLE_ULONGLONG(0);
  bytestotal_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgressUpdate::~ProgressUpdate() {
  // @@protoc_insertion_point(destructor:ddc.distributor.ProgressUpdate)
  SharedDtor();
}

void ProgressUpdate::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void ProgressUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgressUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressUpdate_descriptor_;
}

const ProgressUpdate& ProgressUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

ProgressUpdate* ProgressUpdate::default_instance_ = NULL;

ProgressUpdate* ProgressUpdate::New() const {
  return new ProgressUpdate;
}

void ProgressUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProgressUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(bytescompleted_, bytestotal_);
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgressUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.ProgressUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytesCompleted;
        break;
      }

      // required uint64 bytesCompleted = 2;
      case 2: {
        if (tag == 16) {
         parse_bytesCompleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytescompleted_)));
          set_has_bytescompleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bytesTotal;
        break;
      }

      // required uint64 bytesTotal = 3;
      case 3: {
        if (tag == 24) {
         parse_bytesTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytestotal_)));
          set_has_bytestotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.ProgressUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.ProgressUpdate)
  return false;
#undef DO_
}

void ProgressUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.ProgressUpdate)
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // required uint64 bytesCompleted = 2;
  if (has_bytescompleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytescompleted(), output);
  }

  // required uint64 bytesTotal = 3;
  if (has_bytestotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytestotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.ProgressUpdate)
}

::google::protobuf::uint8* ProgressUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.ProgressUpdate)
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // required uint64 bytesCompleted = 2;
  if (has_bytescompleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytescompleted(), target);
  }

  // required uint64 bytesTotal = 3;
  if (has_bytestotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytestotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.ProgressUpdate)
  return target;
}

int ProgressUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // required uint64 bytesCompleted = 2;
    if (has_bytescompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytescompleted());
    }

    // required uint64 bytesTotal = 3;
    if (has_bytestotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytestotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgressUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgressUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgressUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgressUpdate::MergeFrom(const ProgressUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_bytescompleted()) {
      set_bytescompleted(from.bytescompleted());
    }
    if (from.has_bytestotal()) {
      set_bytestotal(from.bytestotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgressUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressUpdate::CopyFrom(const ProgressUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProgressUpdate::Swap(ProgressUpdate* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(bytescompleted_, other->bytescompleted_);
    std::swap(bytestotal_, other->bytestotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgressUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgressUpdate_descriptor_;
  metadata.reflection = ProgressUpdate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AnyRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnyRequest_Type_descriptor_;
}
bool AnyRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AnyRequest_Type AnyRequest::REGISTRATION;
const AnyRequest_Type AnyRequest::FETCH_SPLIT_REQUEST;
const AnyRequest_Type AnyRequest::FETCH_SPLIT_RESPONSE;
const AnyRequest_Type AnyRequest::HEARTBEAT_REQUEST;
const AnyRequest_Type AnyRequest::HEARTBEAT_RESPONSE;
const AnyRequest_Type AnyRequest::SHUTDOWN_REQUEST;
const AnyRequest_Type AnyRequest::PROGRESS_UPDATE;
const AnyRequest_Type AnyRequest::Type_MIN;
const AnyRequest_Type AnyRequest::Type_MAX;
const int AnyRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AnyRequest::kTypeFieldNumber;
const int AnyRequest::kRegistrationFieldNumber;
const int AnyRequest::kFetchSplitRequestFieldNumber;
const int AnyRequest::kFetchSplitResponseFieldNumber;
const int AnyRequest::kHeartBeatRequestFieldNumber;
const int AnyRequest::kHeartBeatResponseFieldNumber;
const int AnyRequest::kShutdownRequestFieldNumber;
const int AnyRequest::kProgressUpdateFieldNumber;
#endif  // !_MSC_VER

AnyRequest::AnyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddc.distributor.AnyRequest)
}

void AnyRequest::InitAsDefaultInstance() {
  registration_ = const_cast< ::ddc::distributor::Registration*>(&::ddc::distributor::Registration::default_instance());
  fetchsplitrequest_ = const_cast< ::ddc::distributor::FetchSplitRequest*>(&::ddc::distributor::FetchSplitRequest::default_instance());
  fetchsplitresponse_ = const_cast< ::ddc::distributor::FetchSplitResponse*>(&::ddc::distributor::FetchSplitResponse::default_instance());
  heartbeatrequest_ = const_cast< ::ddc::distributor::HeartBeatRequest*>(&::ddc::distributor::HeartBeatRequest::default_instance());
  heartbeatresponse_ = const_cast< ::ddc::distributor::HeartBeatResponse*>(&::ddc::distributor::HeartBeatResponse::default_instance());
  shutdownrequest_ = const_cast< ::ddc::distributor::ShutdownRequest*>(&::ddc::distributor::ShutdownRequest::default_instance());
  progressupdate_ = const_cast< ::ddc::distributor::ProgressUpdate*>(&::ddc::distributor::ProgressUpdate::default_instance());
}

AnyRequest::AnyRequest(const AnyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddc.distributor.AnyRequest)
}

void AnyRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  registration_ = NULL;
  fetchsplitrequest_ = NULL;
  fetchsplitresponse_ = NULL;
  heartbeatrequest_ = NULL;
  heartbeatresponse_ = NULL;
  shutdownrequest_ = NULL;
  progressupdate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnyRequest::~AnyRequest() {
  // @@protoc_insertion_point(destructor:ddc.distributor.AnyRequest)
  SharedDtor();
}

void AnyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete registration_;
    delete fetchsplitrequest_;
    delete fetchsplitresponse_;
    delete heartbeatrequest_;
    delete heartbeatresponse_;
    delete shutdownrequest_;
    delete progressupdate_;
  }
}

void AnyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnyRequest_descriptor_;
}

const AnyRequest& AnyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distributor_2eproto();
  return *default_instance_;
}

AnyRequest* AnyRequest::default_instance_ = NULL;

AnyRequest* AnyRequest::New() const {
  return new AnyRequest;
}

void AnyRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    if (has_registration()) {
      if (registration_ != NULL) registration_->::ddc::distributor::Registration::Clear();
    }
    if (has_fetchsplitrequest()) {
      if (fetchsplitrequest_ != NULL) fetchsplitrequest_->::ddc::distributor::FetchSplitRequest::Clear();
    }
    if (has_fetchsplitresponse()) {
      if (fetchsplitresponse_ != NULL) fetchsplitresponse_->::ddc::distributor::FetchSplitResponse::Clear();
    }
    if (has_heartbeatrequest()) {
      if (heartbeatrequest_ != NULL) heartbeatrequest_->::ddc::distributor::HeartBeatRequest::Clear();
    }
    if (has_heartbeatresponse()) {
      if (heartbeatresponse_ != NULL) heartbeatresponse_->::ddc::distributor::HeartBeatResponse::Clear();
    }
    if (has_shutdownrequest()) {
      if (shutdownrequest_ != NULL) shutdownrequest_->::ddc::distributor::ShutdownRequest::Clear();
    }
    if (has_progressupdate()) {
      if (progressupdate_ != NULL) progressupdate_->::ddc::distributor::ProgressUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddc.distributor.AnyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ddc.distributor.AnyRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ddc::distributor::AnyRequest_Type_IsValid(value)) {
            set_type(static_cast< ::ddc::distributor::AnyRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_registration;
        break;
      }

      // optional .ddc.distributor.Registration registration = 2;
      case 2: {
        if (tag == 18) {
         parse_registration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetchSplitRequest;
        break;
      }

      // optional .ddc.distributor.FetchSplitRequest fetchSplitRequest = 3;
      case 3: {
        if (tag == 26) {
         parse_fetchSplitRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchsplitrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fetchSplitResponse;
        break;
      }

      // optional .ddc.distributor.FetchSplitResponse fetchSplitResponse = 4;
      case 4: {
        if (tag == 34) {
         parse_fetchSplitResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchsplitresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_heartBeatRequest;
        break;
      }

      // optional .ddc.distributor.HeartBeatRequest heartBeatRequest = 5;
      case 5: {
        if (tag == 42) {
         parse_heartBeatRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeatrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_heartBeatResponse;
        break;
      }

      // optional .ddc.distributor.HeartBeatResponse heartBeatResponse = 6;
      case 6: {
        if (tag == 50) {
         parse_heartBeatResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeatresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_shutdownRequest;
        break;
      }

      // optional .ddc.distributor.ShutdownRequest shutdownRequest = 7;
      case 7: {
        if (tag == 58) {
         parse_shutdownRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdownrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_progressUpdate;
        break;
      }

      // optional .ddc.distributor.ProgressUpdate progressUpdate = 8;
      case 8: {
        if (tag == 66) {
         parse_progressUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progressupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddc.distributor.AnyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddc.distributor.AnyRequest)
  return false;
#undef DO_
}

void AnyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddc.distributor.AnyRequest)
  // required .ddc.distributor.AnyRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ddc.distributor.Registration registration = 2;
  if (has_registration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registration(), output);
  }

  // optional .ddc.distributor.FetchSplitRequest fetchSplitRequest = 3;
  if (has_fetchsplitrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fetchsplitrequest(), output);
  }

  // optional .ddc.distributor.FetchSplitResponse fetchSplitResponse = 4;
  if (has_fetchsplitresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fetchsplitresponse(), output);
  }

  // optional .ddc.distributor.HeartBeatRequest heartBeatRequest = 5;
  if (has_heartbeatrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->heartbeatrequest(), output);
  }

  // optional .ddc.distributor.HeartBeatResponse heartBeatResponse = 6;
  if (has_heartbeatresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heartbeatresponse(), output);
  }

  // optional .ddc.distributor.ShutdownRequest shutdownRequest = 7;
  if (has_shutdownrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shutdownrequest(), output);
  }

  // optional .ddc.distributor.ProgressUpdate progressUpdate = 8;
  if (has_progressupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->progressupdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ddc.distributor.AnyRequest)
}

::google::protobuf::uint8* AnyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddc.distributor.AnyRequest)
  // required .ddc.distributor.AnyRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ddc.distributor.Registration registration = 2;
  if (has_registration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registration(), target);
  }

  // optional .ddc.distributor.FetchSplitRequest fetchSplitRequest = 3;
  if (has_fetchsplitrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fetchsplitrequest(), target);
  }

  // optional .ddc.distributor.FetchSplitResponse fetchSplitResponse = 4;
  if (has_fetchsplitresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fetchsplitresponse(), target);
  }

  // optional .ddc.distributor.HeartBeatRequest heartBeatRequest = 5;
  if (has_heartbeatrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->heartbeatrequest(), target);
  }

  // optional .ddc.distributor.HeartBeatResponse heartBeatResponse = 6;
  if (has_heartbeatresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heartbeatresponse(), target);
  }

  // optional .ddc.distributor.ShutdownRequest shutdownRequest = 7;
  if (has_shutdownrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shutdownrequest(), target);
  }

  // optional .ddc.distributor.ProgressUpdate progressUpdate = 8;
  if (has_progressupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->progressupdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddc.distributor.AnyRequest)
  return target;
}

int AnyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ddc.distributor.AnyRequest.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ddc.distributor.Registration registration = 2;
    if (has_registration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registration());
    }

    // optional .ddc.distributor.FetchSplitRequest fetchSplitRequest = 3;
    if (has_fetchsplitrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchsplitrequest());
    }

    // optional .ddc.distributor.FetchSplitResponse fetchSplitResponse = 4;
    if (has_fetchsplitresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchsplitresponse());
    }

    // optional .ddc.distributor.HeartBeatRequest heartBeatRequest = 5;
    if (has_heartbeatrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeatrequest());
    }

    // optional .ddc.distributor.HeartBeatResponse heartBeatResponse = 6;
    if (has_heartbeatresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeatresponse());
    }

    // optional .ddc.distributor.ShutdownRequest shutdownRequest = 7;
    if (has_shutdownrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shutdownrequest());
    }

    // optional .ddc.distributor.ProgressUpdate progressUpdate = 8;
    if (has_progressupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progressupdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnyRequest::MergeFrom(const AnyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_registration()) {
      mutable_registration()->::ddc::distributor::Registration::MergeFrom(from.registration());
    }
    if (from.has_fetchsplitrequest()) {
      mutable_fetchsplitrequest()->::ddc::distributor::FetchSplitRequest::MergeFrom(from.fetchsplitrequest());
    }
    if (from.has_fetchsplitresponse()) {
      mutable_fetchsplitresponse()->::ddc::distributor::FetchSplitResponse::MergeFrom(from.fetchsplitresponse());
    }
    if (from.has_heartbeatrequest()) {
      mutable_heartbeatrequest()->::ddc::distributor::HeartBeatRequest::MergeFrom(from.heartbeatrequest());
    }
    if (from.has_heartbeatresponse()) {
      mutable_heartbeatresponse()->::ddc::distributor::HeartBeatResponse::MergeFrom(from.heartbeatresponse());
    }
    if (from.has_shutdownrequest()) {
      mutable_shutdownrequest()->::ddc::distributor::ShutdownRequest::MergeFrom(from.shutdownrequest());
    }
    if (from.has_progressupdate()) {
      mutable_progressupdate()->::ddc::distributor::ProgressUpdate::MergeFrom(from.progressupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyRequest::CopyFrom(const AnyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_registration()) {
    if (!this->registration().IsInitialized()) return false;
  }
  if (has_fetchsplitrequest()) {
    if (!this->fetchsplitrequest().IsInitialized()) return false;
  }
  if (has_fetchsplitresponse()) {
    if (!this->fetchsplitresponse().IsInitialized()) return false;
  }
  if (has_progressupdate()) {
    if (!this->progressupdate().IsInitialized()) return false;
  }
  return true;
}

void AnyRequest::Swap(AnyRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(registration_, other->registration_);
    std::swap(fetchsplitrequest_, other->fetchsplitrequest_);
    std::swap(fetchsplitresponse_, other->fetchsplitresponse_);
    std::swap(heartbeatrequest_, other->heartbeatrequest_);
    std::swap(heartbeatresponse_, other->heartbeatresponse_);
    std::swap(shutdownrequest_, other->shutdownrequest_);
    std::swap(progressupdate_, other->progressupdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnyRequest_descriptor_;
  metadata.reflection = AnyRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace distributor
}  // namespace ddc

// @@protoc_insertion_point(global_scope)
